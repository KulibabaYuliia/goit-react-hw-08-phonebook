{"version":3,"file":"static/js/236.331c00a4.chunk.js","mappings":"+QAKIA,EAAaC,EAAAA,KAAaC,MAAM,CAClCC,SAAUF,EAAAA,GACA,qBACPG,SAAS,6BACZC,MAAOJ,EAAAA,GACG,sBACPI,MAAM,sBACND,SAAS,6BACZE,SAAUL,EAAAA,GACA,yBACPM,IAAI,EAAG,yBACPH,SAAS,+BAGDI,EAAmB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACjC,OACE,UAACC,EAAA,GAAD,CAAMC,WAAS,EAAf,WACE,SAACD,EAAA,GAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,IAAI,KACtB,SAACJ,EAAA,GAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAtB,UACE,SAACC,EAAA,EAAD,WACE,UAACC,EAAA,EAAD,CACEC,EAAG,EACHC,EAAG,EACHC,QAAQ,OACRC,cAAc,SACdC,WAAW,SALb,WAOE,SAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAAyB,uBACzB,SAAC,KAAD,CACEC,cAAe,CAAErB,SAAU,GAAIE,MAAO,GAAIC,SAAU,IACpDmB,iBAAkBzB,EAClB0B,SAAUjB,EAHZ,UAKE,UAAC,KAAD,YACE,SAAC,KAAD,CACEkB,GAAIC,EAAAA,EACJC,KAAK,OACLC,KAAK,WACLC,MAAM,OACNC,WAAS,EACTT,QAAQ,WACRU,OAAO,QACPC,YAAY,SAAC,KAAD,CAAcJ,KAAK,gBAIjC,SAAC,KAAD,CACEH,GAAIC,EAAAA,EACJC,KAAK,QACLC,KAAK,QACLC,MAAM,QACNC,WAAS,EACTT,QAAQ,WACRU,OAAO,QACPC,YAAY,SAAC,KAAD,CAAcJ,KAAK,aAIjC,SAAC,KAAD,CACEH,GAAIC,EAAAA,EACJC,KAAK,WACLC,KAAK,WACLC,MAAM,WACNI,YAAY,cACZH,WAAS,EACTT,QAAQ,WACRU,OAAO,QACPC,YAAY,SAAC,KAAD,CAAcJ,KAAK,gBAGjC,SAACM,EAAA,EAAD,CACEb,QAAQ,YACRc,MAAM,UACNR,KAAK,SACLG,WAAS,EAJX,SAKC,wBAQX,SAACtB,EAAA,GAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,IAAI,MAG3B,E,sCClFc,SAASwB,IACtB,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAeF,EAAAA,EAAAA,IAAYG,EAAAA,IAC3BC,GAAWC,EAAAA,EAAAA,MAajB,OACE,4BACE,SAACrC,EAAD,CAAkBC,cAbA,SAACqC,EAAQC,GAC7B,IAAMC,EAAU,CACdlB,KAAMgB,EAAO3C,SACbE,MAAOyC,EAAOzC,MACdC,SAAUwC,EAAOxC,UAEnB2C,QAAQC,IAAIF,GACZJ,GAASO,EAAAA,EAAAA,IAAcH,IACvBD,EAAOK,WACR,IAKIb,IAAa,SAACc,EAAA,EAAD,IACbX,IACC,2BAAK,wCAAsCA,OAIlD,C,sHC/BYD,EAAkB,SAAAa,GAAK,OAAIA,EAAMC,SAASA,SAAShB,SAA5B,EACvBI,EAAc,SAAAW,GAAK,OAAIA,EAAMC,SAASA,SAASC,KAA5B,EAGnBC,GAAyBC,EAAAA,EAAAA,IACpC,CAN4B,SAAAJ,GAAK,OAAIA,EAAMC,SAASA,SAASI,KAA5B,EAGF,SAAAL,GAAK,OAAIA,EAAMC,SAASK,WAAnB,IAIpC,SAACL,EAAUK,GAAX,OACEL,EAASM,QAAO,SAAAb,GACd,OAAOA,EAAQlB,KAAKgC,cAAcC,SAASH,EAC5C,GAHH,G","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx","redux/contacts/contacts.selectors.js"],"sourcesContent":["import { TextField, Grid, Button, Paper, Box, Typography } from '@mui/material';\nimport { Formik, ErrorMessage } from 'formik';\nimport { Form, Field } from 'formik';\nimport * as yup from 'yup';\n\nlet userSchema = yup.object().shape({\n  userName: yup\n    .string('Name is not valid')\n    .required('Field should not be empty'),\n  email: yup\n    .string('Email is not valid')\n    .email('Email is not valid')\n    .required('Field should not be empty'),\n  password: yup\n    .string('Password is not valid')\n    .min(7, 'Password is too short')\n    .required('Field should not be empty'),\n});\n\nexport const RegistrationForm = ({ submitHandler }) => {\n  return (\n    <Grid container>\n      <Grid item sm={3} xs={false}></Grid>\n      <Grid item sm={6} xs={12}>\n        <Paper>\n          <Box\n            m={5}\n            p={3}\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n          >\n            <Typography variant=\"h5\">Registration Form</Typography>\n            <Formik\n              initialValues={{ userName: '', email: '', password: '' }}\n              validationSchema={userSchema}\n              onSubmit={submitHandler}\n            >\n              <Form>\n                <Field\n                  as={TextField}\n                  type=\"text\"\n                  name=\"userName\"\n                  label=\"Name\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                  helperText={<ErrorMessage name=\"userName\" />}\n                  // error={props.errors.email && props.touched.email}\n                />\n\n                <Field\n                  as={TextField}\n                  type=\"email\"\n                  name=\"email\"\n                  label=\"Email\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                  helperText={<ErrorMessage name=\"email\" />}\n                  // error={props.errors.email && props.touched.email}\n                />\n\n                <Field\n                  as={TextField}\n                  type=\"password\"\n                  name=\"password\"\n                  label=\"Password\"\n                  placeholder=\"***********\"\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                  helperText={<ErrorMessage name=\"password\" />}\n                />\n\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  type=\"submit\"\n                  fullWidth\n                >\n                  Log in\n                </Button>\n              </Form>\n            </Formik>\n          </Box>\n        </Paper>\n      </Grid>\n      <Grid item sm={3} xs={false}></Grid>\n    </Grid>\n  );\n};\n","import { RegistrationForm } from 'components/RegisterForm/RegisterForm';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  selectIsLoading,\n  selectError,\n} from 'redux/contacts/contacts.selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { registerThunk } from 'redux/auth/auth.operations';\n\nexport default function Contacts() {\n  const isLoading = useSelector(selectIsLoading);\n  const errorMassege = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  const submitHandler = (values, action) => {\n    const contact = {\n      name: values.userName,\n      email: values.email,\n      password: values.password,\n    };\n    console.log(contact);\n    dispatch(registerThunk(contact));\n    action.resetForm();\n  };\n\n  return (\n    <div>\n      <RegistrationForm submitHandler={submitHandler} />\n      {isLoading && <Loader />}\n      {errorMassege && (\n        <div>Something went wrong. Error messege: {errorMassege}</div>\n      )}\n    </div>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts.items;\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\nexport const selectError = state => state.contacts.contacts.error;\nexport const selectFilterQuery = state => state.contacts.filterQuery;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilterQuery],\n  (contacts, filterQuery) =>\n    contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filterQuery);\n    })\n);\n"],"names":["userSchema","yup","shape","userName","required","email","password","min","RegistrationForm","submitHandler","Grid","container","item","sm","xs","Paper","Box","m","p","display","flexDirection","alignItems","Typography","variant","initialValues","validationSchema","onSubmit","as","TextField","type","name","label","fullWidth","margin","helperText","placeholder","Button","color","Contacts","isLoading","useSelector","selectIsLoading","errorMassege","selectError","dispatch","useDispatch","values","action","contact","console","log","registerThunk","resetForm","Loader","state","contacts","error","selectFilteredContacts","createSelector","items","filterQuery","filter","toLowerCase","includes"],"sourceRoot":""}