{"version":3,"file":"static/js/284.01323b71.chunk.js","mappings":"wNAGaA,GAAWC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,ycA0BRE,GAAcF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,kJ,mBCtBpBI,EAAaC,EAAAA,KAAaC,MAAM,CAClCC,KAAMF,EAAAA,GAAW,sBAAsBG,MAAM,sBAAsBC,WACnEC,OAAQL,EAAAA,GACE,yBACPM,IAAI,EAAG,yBACPF,aAGQG,EAAY,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAY1B,OACE,SAAC,KAAD,CACEC,cAAe,CAAEN,MAAO,GAAIO,SAAU,IACtCC,iBAAkBZ,EAClBa,SAAUJ,EAHZ,UAKE,UAACd,EAAD,YACE,6BAAO,SAEL,SAACG,EAAD,CAAagB,KAAK,QAAQX,KAAK,WAC/B,SAAC,KAAD,CAAcA,KAAK,QAAQY,UAAU,YAEvC,6BAAO,YAEL,SAACjB,EAAD,CACEgB,KAAK,WACLX,KAAK,WACLa,YAAY,iBAEd,SAAC,KAAD,CAAcb,KAAK,WAAWY,UAAU,YAE1C,mBAAQD,KAAK,SAAb,SAAsB,eAI7B,E,sCC1Cc,SAASG,IACtB,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAeF,EAAAA,EAAAA,IAAYG,EAAAA,IAC3BC,GAAWC,EAAAA,EAAAA,MAWjB,OACE,4BACE,wBAAI,gBACJ,SAAChB,EAAD,CAAWC,cAZO,SAACgB,EAAQC,GAC7B,IAAMC,EAAU,CACdvB,MAAOqB,EAAOrB,MACdO,SAAUc,EAAOd,UAEnBY,GAASK,EAAAA,EAAAA,IAAWD,IACpBD,EAAOG,WACR,IAMIX,IAAa,SAACY,EAAA,EAAD,IACbT,IACC,2BAAK,wCAAsCA,OAIlD,C,sHC/BYD,EAAkB,SAAAW,GAAK,OAAIA,EAAMC,SAASA,SAASd,SAA5B,EACvBI,EAAc,SAAAS,GAAK,OAAIA,EAAMC,SAASA,SAASC,KAA5B,EAGnBC,GAAyBC,EAAAA,EAAAA,IACpC,CAN4B,SAAAJ,GAAK,OAAIA,EAAMC,SAASA,SAASI,KAA5B,EAGF,SAAAL,GAAK,OAAIA,EAAMC,SAASK,WAAnB,IAIpC,SAACL,EAAUK,GAAX,OACEL,EAASM,QAAO,SAAAX,GACd,OAAOA,EAAQxB,KAAKoC,cAAcC,SAASH,EAC5C,GAHH,G","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login.jsx","redux/contacts/contacts.selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormWrap = styled(Form)`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid;\n  width: 300px;\n  align-items: start;\n  border-radius: 4px;\n  margin-bottom: 20px;\n  margin-top: 10px;\n\n  label {\n    display: flex;\n    gap: 10px;\n    flex-direction: column;\n    margin-bottom: 10px;\n  }\n\n  button {\n    padding: 5px;\n    border-radius: 4px;\n    background-color: transparent;\n    border: 1px solid #b2b2b2;\n  }\n`;\n\nexport const StyledField = styled(Field)`\n  border: 1px solid #b2b2b2;\n  border-radius: 4px;\n  padding: 3px;\n\n  &:focus {\n    border-color: transparent;\n  }\n`;\n","import { FormWrap, StyledField } from './LoginForm.styled';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\n// import { useDispatch } from 'react-redux';\n// import { fetchLoginSubmit } from 'redux/auth/auth.operations';\n\nlet userSchema = yup.object().shape({\n  name: yup.string('Email is not valid').email('Email is not valid').required(),\n  number: yup\n    .string('Password is not valid')\n    .min(7, 'Password is too short')\n    .required(),\n});\n\nexport const LoginForm = ({ submitHandler }) => {\n  // const dispatch = useDispatch();\n\n  // const submitHandler = (values, action) => {\n  //   const contact = {\n  //     email: values.email,\n  //     password: values.password,\n  //   };\n  //   dispatch(fetchLoginSubmit(contact));\n  //   action.resetForm();\n  // };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={userSchema}\n      onSubmit={submitHandler}\n    >\n      <FormWrap>\n        <label>\n          Email\n          <StyledField type=\"email\" name=\"email\" />\n          <ErrorMessage name=\"email\" component=\"div\" />\n        </label>\n        <label>\n          Password\n          <StyledField\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"***********\"\n          />\n          <ErrorMessage name=\"password\" component=\"div\" />\n        </label>\n        <button type=\"submit\">Log in</button>\n      </FormWrap>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  selectIsLoading,\n  selectError,\n} from 'redux/contacts/contacts.selectors';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { loginThunk } from 'redux/auth/auth.operations';\n\nexport default function Contacts() {\n  const isLoading = useSelector(selectIsLoading);\n  const errorMassege = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  const submitHandler = (values, action) => {\n    const contact = {\n      email: values.email,\n      password: values.password,\n    };\n    dispatch(loginThunk(contact));\n    action.resetForm();\n  };\n\n  return (\n    <div>\n      <h1>Login Page</h1>\n      <LoginForm submitHandler={submitHandler} />\n      {isLoading && <Loader />}\n      {errorMassege && (\n        <div>Something went wrong. Error messege: {errorMassege}</div>\n      )}\n    </div>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts.items;\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\nexport const selectError = state => state.contacts.contacts.error;\nexport const selectFilterQuery = state => state.contacts.filterQuery;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilterQuery],\n  (contacts, filterQuery) =>\n    contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filterQuery);\n    })\n);\n"],"names":["FormWrap","styled","Form","StyledField","Field","userSchema","yup","shape","name","email","required","number","min","LoginForm","submitHandler","initialValues","password","validationSchema","onSubmit","type","component","placeholder","Contacts","isLoading","useSelector","selectIsLoading","errorMassege","selectError","dispatch","useDispatch","values","action","contact","loginThunk","resetForm","Loader","state","contacts","error","selectFilteredContacts","createSelector","items","filterQuery","filter","toLowerCase","includes"],"sourceRoot":""}